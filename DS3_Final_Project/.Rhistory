),
# Create tabs
tabsetPanel(
tabPanel(
"Analysis",
sidebarLayout(
sidebarPanel(
tags$h3(
"Top Words for Threat Topics",
style = "color: white; font-size: 18px; margin-bottom: 10px;"
),
div(
style = "background-color: #2b2b2b; padding: 10px; border-radius: 5px; color: white;",
tableOutput("topicsTable")  # Placeholder for topic words table
),
tags$hr(style = "border-color: #444;"),
tags$h3(
"Top Words for States",
style = "color: white; font-size: 18px; margin-bottom: 10px;"
),
selectInput(
"stateInput",
"Select a State:",
choices = state_top_words$STATE,  # Populate dropdown with unique state names
selected = state_top_words$STATE[1]
),
div(
style = "background-color: #2b2b2b; padding: 10px; border-radius: 5px; color: white; margin-top: 10px;",
textOutput("stateTopWords")  # Placeholder for state words
)
),
mainPanel(
tags$h3(
"Predicted Threats against State and Local Officials",
style = "color: white; font-size: 18px; text-align: center; margin-bottom: 15px;"
),
leafletOutput("map", height = "600px")  # Map visualization
)
)
),
tabPanel(
"Data Information",
tags$h3(
"About the Data",
style = "font-size: 18px; font-weight: bold;"  # Adjust font size here
),
uiOutput("dataDescription")
)
)
)
# Define server
server <- function(input, output, session) {
# Render the map
output$map <- renderLeaflet({
leaflet(states_precision) %>%
addTiles() %>%
addPolygons(
fillColor = ~colorNumeric("YlOrRd", Precision)(Precision),
fillOpacity = 0.7,
color = "#555",
weight = 1,
popup = ~paste(
"<b>State:</b>", predicted_state,
"<br><b>Precision:</b>", round(Precision, 2),
paste0("<br><b>", topics$Topics[1], ":</b> ", round(avg_topic_1, 2)),
paste0("<br><b>", topics$Topics[2], ":</b> ", round(avg_topic_2, 2)),
paste0("<br><b>", topics$Topics[3], ":</b> ", round(avg_topic_3, 2)),
paste0("<br><b>", topics$Topics[4], ":</b> ", round(avg_topic_4, 2))
),
highlightOptions = highlightOptions(
weight = 3,
color = "black",
fillOpacity = 0.9
)
) %>%
addLegend(
pal = colorNumeric("YlOrRd", states_precision$Precision),
values = states_precision$Precision,
title = "Precision",
position = "bottomright"
)
})
# Render the topics table
output$topicsTable <- renderTable({
# Create a cleaned-up data frame
data.frame(
Topic = topics$Topics,
`Top Words` = apply(topics[-1], 1, function(x) paste(x, collapse = ", "))
)
}, striped = FALSE, hover = TRUE, bordered = FALSE, align = "l")
# Render the top words for the selected state
output$stateTopWords <- renderText({
selected_state <- input$stateInput
# Debugging: Print the selected state
cat("Selected State:", selected_state, "\n")
# Find the top words for the selected state
state_data <- state_top_words %>%
filter(STATE == selected_state)
# If no data found, return a friendly message
if (nrow(state_data) == 0) {
return("No data available for the selected state.")
}
# Return the top words as a comma-separated string
paste(state_data$Top_Words)
})
# Render the dataset description as two paragraphs
output$dataDescription <- renderUI({
HTML(
paste(
"The data used in this analysis comes from the Bridging Divides Initiative (BDI) at Princeton University. This novel dataset compiles information on instances of threats and harassment against local government officials into a single database. Updated every month since 2022, there are more than 1,300 official threats included in the data.",
"<br><br>",  # Line break for the second paragraph
"This research explores a concerning and escalating trend surrounding elected government officials. State and local government officials are increasingly targeted by serious threats; as political polarization has increased in the United States, so too has the intensity and malice of criticism against low-profile government officials. Local officials seldom have the protections or safety resources of higher-level officials, making them more vulnerable to these threats. As the frequency of these threats continues to increase, identifying patterns within the threats is an important step to raising awareness for the safety of the officials and combating political violence.",
"<br><br>",
"<br><br>",
"Source: Bridging Divides Initiative - Empirical Studies of Conflict. (2024). Threats and Harassment Dataset. Princeton University. https://bridgingdivides.princeton.edu/research/understanding-threats-and-harassment-against-local-officials/dataset  "
)
)
})
}
# Run the app
shinyApp(ui, server)
runApp('DS3_Final_Project.R')
runApp('DS3_Final_Project.R')
runApp('DS3_Final_Project.R')
runApp('DS3_Final_Project.R')
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
library(shiny)
library(leaflet)
library(dplyr)
library(DT)
library(sf)
library(readr)
library(bslib)
setwd("/Users/holtcochran/Documents/Georgetown MS-DSPP/Fall_2024/DSIII/final_project/DS3_Final_Project")
# Load the data
topics <- read_csv("topics.csv")
# Load the data
topics <- read_csv("topics.csv", show_col_types = FALSE)
colnames(topics)[1] <- "Topics"
topics$Topics <- c("Harrassment", "School Officials", "Racism", "Judiciary/Legal")
state_top_words <- read_csv("state_top_words.csv", show_col_types = FALSE)
colnames(state_top_words)[colnames(state_top_words) == "Top.Words"] <- "Top Words"
# import new thd data
thd_predictions <- read_csv("../thd_predictions.csv", show_col_types = FALSE)
thd_topic_average <- thd_predictions %>%
group_by(predicted_state) %>%
summarise(
avg_topic_1 = mean(topic_0, na.rm = TRUE),
avg_topic_2 = mean(topic_1, na.rm = TRUE),
avg_topic_3 = mean(topic_2, na.rm = TRUE),
avg_topic_4 = mean(topic_3, na.rm = TRUE)
)
# download geometries
states_geo <- tigris::states(cb = TRUE)
# merge with geo data
thd_geo <- thd_topic_average %>%
left_join(states_geo, by = c("predicted_state" = "NAME")) %>%
st_as_sf()
# Load the classification report
precision_data <- read.csv("../classification_report.csv")
# Merge precision data with geometries
states_precision <- thd_geo %>%
left_join(precision_data, by = c("predicted_state" = "STATE")) %>%
st_as_sf()
# Define UI
ui <- fluidPage(
theme = bs_theme(bootswatch = "darkly"),
titlePanel(
div(
style = "text-align: center; margin-bottom: 20px;",
tags$h1(
"Threats Against US Government Officials",
style = "font-weight: bold; color: white; margin-bottom: 10px;"
),
tags$p("Holt Cochran", style = "font-size: 20px; color: #cccccc;")
)
),
# Create tabs
tabsetPanel(
tabPanel(
"Analysis",
sidebarLayout(
sidebarPanel(
tags$h3(
"Top Words for Threat Topics",
style = "color: white; font-size: 18px; margin-bottom: 10px;"
),
div(
style = "background-color: #2b2b2b; padding: 10px; border-radius: 5px; color: white;",
tableOutput("topicsTable")  # Placeholder for topic words table
),
tags$hr(style = "border-color: #444;"),
tags$h3(
"Top Words for States",
style = "color: white; font-size: 18px; margin-bottom: 10px;"
),
selectInput(
"stateInput",
"Select a State:",
choices = state_top_words$STATE,  # Populate dropdown with unique state names
selected = state_top_words$STATE[1]
),
div(
style = "background-color: #2b2b2b; padding: 10px; border-radius: 5px; color: white; margin-top: 10px;",
textOutput("stateTopWords")  # Placeholder for state words
)
),
mainPanel(
tags$h3(
"Predicted Threats against State and Local Officials",
style = "color: white; font-size: 18px; text-align: center; margin-bottom: 15px;"
),
leafletOutput("map", height = "600px")  # Map visualization
)
)
),
tabPanel(
"Data Information",
tags$h3(
"About the Data",
style = "font-size: 18px; font-weight: bold;"  # Adjust font size here
),
uiOutput("dataDescription")
)
)
)
# Define server
server <- function(input, output, session) {
# Render the map
output$map <- renderLeaflet({
leaflet(states_precision) %>%
addTiles() %>%
addPolygons(
fillColor = ~colorNumeric("YlOrRd", Precision)(Precision),
fillOpacity = 0.7,
color = "#555",
weight = 1,
popup = ~paste(
"<b>State:</b>", predicted_state,
"<br><b>Precision:</b>", round(Precision, 2),
paste0("<br><b>", topics$Topics[1], ":</b> ", round(avg_topic_1, 2)),
paste0("<br><b>", topics$Topics[2], ":</b> ", round(avg_topic_2, 2)),
paste0("<br><b>", topics$Topics[3], ":</b> ", round(avg_topic_3, 2)),
paste0("<br><b>", topics$Topics[4], ":</b> ", round(avg_topic_4, 2))
),
highlightOptions = highlightOptions(
weight = 3,
color = "black",
fillOpacity = 0.9
)
) %>%
addLegend(
pal = colorNumeric("YlOrRd", states_precision$Precision),
values = states_precision$Precision,
title = "Precision",
position = "bottomright"
)
})
# Render the topics table
output$topicsTable <- renderTable({
# Create a cleaned-up data frame
data.frame(
Topic = topics$Topics,
`Top Words` = apply(topics[-1], 1, function(x) paste(x, collapse = ", "))
)
}, striped = FALSE, hover = TRUE, bordered = FALSE, align = "l")
# Render the top words for the selected state
output$stateTopWords <- renderText({
selected_state <- input$stateInput
# Debugging: Print the selected state
cat("Selected State:", selected_state, "\n")
# Find the top words for the selected state
state_data <- state_top_words %>%
filter(STATE == selected_state)
# If no data found, return a friendly message
if (nrow(state_data) == 0) {
return("No data available for the selected state.")
}
# Return the top words as a comma-separated string
paste(state_data$Top_Words)
})
# Render the dataset description as two paragraphs
output$dataDescription <- renderUI({
HTML(
paste(
"The data used in this analysis comes from the Bridging Divides Initiative (BDI) at Princeton University. This novel dataset compiles information on instances of threats and harassment against local government officials into a single database. Updated every month since 2022, there are more than 1,300 official threats included in the data.",
"<br><br>",  # Line break for the second paragraph
"This research explores a concerning and escalating trend surrounding elected government officials. State and local government officials are increasingly targeted by serious threats; as political polarization has increased in the United States, so too has the intensity and malice of criticism against low-profile government officials. Local officials seldom have the protections or safety resources of higher-level officials, making them more vulnerable to these threats. As the frequency of these threats continues to increase, identifying patterns within the threats is an important step to raising awareness for the safety of the officials and combating political violence.",
"<br><br>",
"<br><br>",
"Source: Bridging Divides Initiative - Empirical Studies of Conflict. (2024). Threats and Harassment Dataset. Princeton University. https://bridgingdivides.princeton.edu/research/understanding-threats-and-harassment-against-local-officials/dataset  "
)
)
})
}
# Run the app
shinyApp(ui, server)
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
runApp('DS3_Final_Project.R')
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
runApp('DS3_Final_Project.R')
runApp('DS3_Final_Project.R')
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
rsconnect::setAccountInfo(name='owhcbn-holt-cochran', token='9933FC5D6EE74C1478EE4293EE191F0F', secret='WYL+3P1No8KYzPvX8zWFj4D83muGB4EGbR1nXZGf')
rsconnect::deployApp('/Users/holtcochran/Documents/Georgetown MS-DSPP/Fall_2024/DSIII/final_project/DS3_Final_Project/DS3_Final_Project.R')
rsconnect::deployApp('/Users/holtcochran/Documents/Georgetown MS-DSPP/Fall_2024/DSIII/final_project/DS3_Final_Project/')
rlang::last_trace()
rlang::last_trace(drop = FALSE)
rsconnect::deployApp('/Users/holtcochran/Documents/Georgetown MS-DSPP/Fall_2024/DSIII/final_project/DS3_Final_Project/')
rsconnect::deployApp('/Users/holtcochran/Documents/Georgetown MS-DSPP/Fall_2024/DSIII/final_project/DS3_Final_Project/')
rsconnect::deployApp('/Users/holtcochran/Documents/Georgetown MS-DSPP/Fall_2024/DSIII/final_project/DS3_Final_Project/')
rsconnect::deployApp('/Users/holtcochran/Documents/Georgetown MS-DSPP/Fall_2024/DSIII/final_project/DS3_Final_Project/')
rsconnect::deployApp('/Users/holtcochran/Documents/Georgetown MS-DSPP/Fall_2024/DSIII/final_project/DS3_Final_Project/')
runApp('DS3_Final_Project.R')
library(shiny)
library(leaflet)
library(dplyr)
library(DT)
library(sf)
library(readr)
library(bslib)
# Load the data
topics <- read_csv("topics.csv", show_col_types = FALSE)
colnames(topics)[1] <- "Topics"
topics$Topics <- c("Harrassment", "School Officials", "Racism", "Judiciary/Legal")
state_top_words <- read_csv("state_top_words.csv", show_col_types = FALSE)
colnames(state_top_words)[colnames(state_top_words) == "Top.Words"] <- "Top Words"
# import new thd data
thd_predictions <- read_csv("../thd_predictions.csv", show_col_types = FALSE)
thd_topic_average <- thd_predictions %>%
group_by(predicted_state) %>%
summarise(
avg_topic_1 = mean(topic_0, na.rm = TRUE),
avg_topic_2 = mean(topic_1, na.rm = TRUE),
avg_topic_3 = mean(topic_2, na.rm = TRUE),
avg_topic_4 = mean(topic_3, na.rm = TRUE)
)
# download geometries
states_geo <- tigris::states(cb = TRUE)
# merge with geo data
thd_geo <- thd_topic_average %>%
left_join(states_geo, by = c("predicted_state" = "NAME")) %>%
st_as_sf()
# Load the classification report
precision_data <- read.csv("../classification_report.csv")
# Merge precision data with geometries
states_precision <- thd_geo %>%
left_join(precision_data, by = c("predicted_state" = "STATE")) %>%
st_as_sf()
# Define UI
ui <- fluidPage(
theme = bs_theme(bootswatch = "darkly"),
titlePanel(
div(
style = "text-align: center; margin-bottom: 20px;",
tags$h1(
"Threats Against US Government Officials",
style = "font-weight: bold; color: white; margin-bottom: 10px;"
),
tags$p("Holt Cochran", style = "font-size: 20px; color: #cccccc;")
)
),
# Create tabs
tabsetPanel(
tabPanel(
"Analysis",
sidebarLayout(
sidebarPanel(
tags$h3(
"Top Words for Threat Topics",
style = "color: white; font-size: 18px; margin-bottom: 10px;"
),
div(
style = "background-color: #2b2b2b; padding: 10px; border-radius: 5px; color: white;",
tableOutput("topicsTable")  # Placeholder for topic words table
),
tags$hr(style = "border-color: #444;"),
tags$h3(
"Top Words for States",
style = "color: white; font-size: 18px; margin-bottom: 10px;"
),
selectInput(
"stateInput",
"Select a State:",
choices = state_top_words$STATE,  # Populate dropdown with unique state names
selected = state_top_words$STATE[1]
),
div(
style = "background-color: #2b2b2b; padding: 10px; border-radius: 5px; color: white; margin-top: 10px;",
textOutput("stateTopWords")  # Placeholder for state words
)
),
mainPanel(
tags$h3(
"Predicted Threats against State and Local Officials",
style = "color: white; font-size: 18px; text-align: center; margin-bottom: 15px;"
),
leafletOutput("map", height = "600px")  # Map visualization
)
)
),
tabPanel(
"Data Information",
tags$h3(
"About the Data",
style = "font-size: 18px; font-weight: bold;"  # Adjust font size here
),
uiOutput("dataDescription")
)
)
)
# Define server
server <- function(input, output, session) {
# Render the map
output$map <- renderLeaflet({
leaflet(states_precision) %>%
addTiles() %>%
addPolygons(
fillColor = ~colorNumeric("YlOrRd", Precision)(Precision),
fillOpacity = 0.7,
color = "#555",
weight = 1,
popup = ~paste(
"<b>State:</b>", predicted_state,
"<br><b>Precision:</b>", round(Precision, 2),
paste0("<br><b>", topics$Topics[1], ":</b> ", round(avg_topic_1, 2)),
paste0("<br><b>", topics$Topics[2], ":</b> ", round(avg_topic_2, 2)),
paste0("<br><b>", topics$Topics[3], ":</b> ", round(avg_topic_3, 2)),
paste0("<br><b>", topics$Topics[4], ":</b> ", round(avg_topic_4, 2))
),
highlightOptions = highlightOptions(
weight = 3,
color = "black",
fillOpacity = 0.9
)
) %>%
addLegend(
pal = colorNumeric("YlOrRd", states_precision$Precision),
values = states_precision$Precision,
title = "Precision",
position = "bottomright"
)
})
# Render the topics table
output$topicsTable <- renderTable({
# Create a cleaned-up data frame
data.frame(
Topic = topics$Topics,
`Top Words` = apply(topics[-1], 1, function(x) paste(x, collapse = ", "))
)
}, striped = FALSE, hover = TRUE, bordered = FALSE, align = "l")
# Render the top words for the selected state
output$stateTopWords <- renderText({
selected_state <- input$stateInput
# Debugging: Print the selected state
cat("Selected State:", selected_state, "\n")
# Find the top words for the selected state
state_data <- state_top_words %>%
filter(STATE == selected_state)
# If no data found, return a friendly message
if (nrow(state_data) == 0) {
return("No data available for the selected state.")
}
# Return the top words as a comma-separated string
paste(state_data$Top_Words)
})
# Render the dataset description as two paragraphs
output$dataDescription <- renderUI({
HTML(
paste(
"The data used in this analysis comes from the Bridging Divides Initiative (BDI) at Princeton University. This novel dataset compiles information on instances of threats and harassment against local government officials into a single database. Updated every month since 2022, there are more than 1,300 official threats included in the data.",
"<br><br>",  # Line break for the second paragraph
"This research explores a concerning and escalating trend surrounding elected government officials. State and local government officials are increasingly targeted by serious threats; as political polarization has increased in the United States, so too has the intensity and malice of criticism against low-profile government officials. Local officials seldom have the protections or safety resources of higher-level officials, making them more vulnerable to these threats. As the frequency of these threats continues to increase, identifying patterns within the threats is an important step to raising awareness for the safety of the officials and combating political violence.",
"<br><br>",
"<br><br>",
"Source: Bridging Divides Initiative - Empirical Studies of Conflict. (2024). Threats and Harassment Dataset. Princeton University. https://bridgingdivides.princeton.edu/research/understanding-threats-and-harassment-against-local-officials/dataset  "
)
)
})
}
# Run the app
shinyApp(ui, server)
runApp('DS3_Final_Project.R')
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
# import new thd data
thd_predictions <- read_csv("thd_predictions.csv", show_col_types = FALSE)
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
runApp('DS3_Final_Project.R')
runApp('DS3_Final_Project.R')
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
# download geometries
states_geo <- tigris::states(cb = TRUE, progress_bar = FALSE)
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
runApp('DS3_Final_Project.R')
runApp('DS3_Final_Project.R')
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
runApp('DS3_Final_Project.R')
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
runApp('DS3_Final_Project.R')
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
rsconnect::setAccountInfo(name='owhcbn-holt-cochran', token='9933FC5D6EE74C1478EE4293EE191F0F', secret='WYL+3P1No8KYzPvX8zWFj4D83muGB4EGbR1nXZGf')
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
# Load the classification report
precision_data <- read.csv("classification_report.csv")
rsconnect::showLogs(appName = "DS3_Final_Project", entries = 100)
options(shiny.error = browser)
